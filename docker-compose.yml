services:
    fastapi:
        image: school_fastapi
        container_name: server
        build: .
        environment:
        - UVICORN_RELOAD=true
        volumes:
        - ./server:/app
        ports:
        - "8000:8000"
        command: "uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"

    vue:
        image: school_vue
        container_name: client
        volumes:
            - ./client:/app
            - /app/node_modules
        ports:
        - "5173:5173"
        command: "npm run dev"

# Opci√≥n 2 (probar)
# version: "3.9"

# services:
#   fastapi:
#     image: school_fastapi           # Imagen personalizada
#     container_name: server
#     build:
#       context: ./server             # üîç Mejora: separa el contexto del backend
#       dockerfile: Dockerfile        # (opcional si tu Dockerfile est√° en ./server)
#     environment:
#       - UVICORN_RELOAD=true
#     volumes:
#       - ./server:/app               # C√≥digo local montado dentro del contenedor
#     ports:
#       - "8000:8000"
#     command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

#   vue:
#     image: school_vue
#     container_name: client
#     build:
#       context: ./client             # üîç Mejora: aseg√∫rate de que se construya la imagen
#       dockerfile: Dockerfile        # si usas uno en ./client
#     volumes:
#       - ./client:/app
#       - /app/node_modules           # Evita conflictos de node_modules entre host y contenedor
#     ports:
#       - "5173:5173"
#     command: npm run dev


    # db:
    #   image: postgres:13
    #   container_name: postgres-db
    #   environment:
    #     POSTGRES_USER: user
    #     POSTGRES_PASSWORD: password
    #     POSTGRES_DB: fastapi_db
    #   ports:
    #     - "5432:5432"
    #   volumes:
    #     - postgres_data:/var/lib/postgresql/data
    #   networks:
    #     - fastapi-network


    # volumes:
    #   postgres_data:

    # networks:
    #   fastapi-network:
    #     driver: bridge
